version: '3.8'

services:
  # Frontend React
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: felipe-frontend
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
    networks:
      - felipe-network
    restart: unless-stopped

  # Backend FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: felipe-backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/felipe_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
    depends_on:
      - postgres
      - redis
    networks:
      - felipe-network
    restart: unless-stopped

  # Servidor MCP para CodeLlama
  mcp-server:
    build:
      context: ./mcp-server
      dockerfile: Dockerfile
    container_name: felipe-mcp
    ports:
      - "3001:3001"
    environment:
      - OLLAMA_HOST=ollama:11434
      - MODEL_CODELLAMA=codellama:7b
      - MODEL_DEEPSEEK=deepseek-coder:6.7b
    depends_on:
      - ollama
    networks:
      - felipe-network
    restart: unless-stopped

  # Ollama para modelos locales
  ollama:
    image: ollama/ollama:latest
    container_name: felipe-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama-data:/root/.ollama
    environment:
      - OLLAMA_ORIGINS=*
    networks:
      - felipe-network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: felipe-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=felipe_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - felipe-network
    restart: unless-stopped

  # Redis para cach√© y sesiones
  redis:
    image: redis:7-alpine
    container_name: felipe-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - felipe-network
    restart: unless-stopped

  # n8n para workflows
  n8n:
    image: n8nio/n8n:latest
    container_name: felipe-n8n
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD}
      - WEBHOOK_URL=https://${DOMAIN}/webhook/
      - GENERIC_TIMEZONE=America/Bogota
    volumes:
      - n8n-data:/home/node/.n8n
      - ./n8n/workflows:/home/node/.n8n/workflows
    networks:
      - felipe-network
    restart: unless-stopped

  # Nginx Proxy
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: felipe-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
      - mcp-server
    networks:
      - felipe-network
    restart: unless-stopped

volumes:
  postgres-data:
  redis-data:
  ollama-data:
  n8n-data:

networks:
  felipe-network:
    driver: bridge